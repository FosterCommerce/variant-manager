
{% extends 'variant-manager/_layouts/examples' %}

{% set productId = craft.app.request.getSegment(4) %}

{% css %}

body {

	background-color: #f1f4ff;

}

h3 {

	font-family: sans-serif;

}

.product {

	padding: 2rem;

}

.product ul {

	display: flex; align-items: center; justify-content: start; flex-direction: row;

}

.product ul > li {

	list-style-type: none; margin: 0.5rem 0.5rem;

}

.product ul > li > div {

	background-color: #FFFFFF; color: #202020; 
	box-sizing: border-box;
	height: 3rem; min-height: 3rem; 
	padding: 1rem; 
	font-family: sans-serif; font-size: 0.8rem;

}

.product ul > li.active > div {

	border: 0.2rem solid #5EA3C1;

}

.product ul > li.incompatible > div {

	background-color: #DDDDDD; color: #AAAAAA;

}

.product ul > li.unavailable > div {

	color: #C15E7C;

}

{% endcss %}

{% block body %}

<script type="module">

import { createApp, reactive } from 'https://unpkg.com/petite-vue?module';

const api = (type = 'get', url, payload = {}, headers = {}) => {

	const config = {
		headers: headers ?? {
			'Content-Type': 'application/json',
			Accept: 'application/json',
			'X-Requested-With': 'XMLHttpRequest',
			HTTP_X_REQUESTED_WITH: 'XMLHttpRequest',
		},
	};

	if (type === 'get') {

		console.log(url);

		return fetch(`/${url}`, {
			method: 'GET',
			headers
		}).then((response) => {

			return response.json();

		});

	}

};

function Product(props) {

	return {

		$template: '#product',

		variants: {},
		options: {},

		active: {},
		currentVariant: null,

		mounted() {

			this.fetchVariants();

		},

		chooseOption(e) {

			let el = e.target.closest('li.options.option-value');

			this.updateSelected(el.dataset.name, el.dataset.value);

		},

		createOptions() {

			this.options = {}

			for (const variantIndex in this.variants) {

				let variant = this.variants[variantIndex]

				for (const option of variant['attributes']) {

					if (!this.options[option.name]) this.options[option.name] = {};
					if (!this.options[option.name][option.value]) {
						
						this.options[option.name][option.value] = {
							'isActive': false, 
							'isUnavailable': false,
							'isIncompatible': false,
							'ids': [],
							'variants': []
						};

					}

					this.options[option.name][option.value]['ids'].push(variant.id);

				}

			}

		},

		cleanActive(ids) {

			for (const optionName in this.active) {

				if (!this.intersectingIds(ids, this.options[optionName][this.active[optionName]].ids).length) delete this.active[optionName];

			}

		},

		determineActive(ids) {

			for (const optionName in this.options) {

				const option = this.options[optionName];

				for (const optionValue in option) {

					Object.assign(
						this.options[optionName][optionValue], {
							'isActive': false
						}
					);

					let data = this.options[optionName][optionValue];

					if (optionValue === this.active[optionName]) {

						this.options[optionName][optionValue]['isActive'] = true;

					} else if (this.intersectingIds(ids, data['ids']).length) {

						if (!this.active[optionName]) {

							this.options[optionName][optionValue]['isActive'] = true;

							this.active[optionName] = optionValue;

						} 

					}

				}

			}

		},

		getVariantsByIds(ids) {

			const variants = [];
			for (const variant of this.variants) {

				if (ids.includes(variant.id)) variants.push(variant);

			}

			return variants;

		},

		intersectingIds(ids, predicate) {

			return ids.filter(x => predicate.includes(x));

		},

		allIntersectingIds(data) {

			return data.reduce((a, b) => a.filter(c => b.includes(c)));

		},

		getComparableIds(predicateOptionName) {

			const data = [];
			for (const optionName in this.active) {

				if (predicateOptionName !== optionName) data.push(this.options[optionName][this.active[optionName]].ids);

			}

			return this.allIntersectingIds(data);

		},

		updateSelected(selectedOptionName, selectedOptionValue) {

			const ids = this.options[selectedOptionName][selectedOptionValue].ids;

			this.active[selectedOptionName] = selectedOptionValue; 

			this.cleanActive(ids)
			this.determineActive(ids);
			this.determineUnavailable();
			this.currentVariant = this.determineCurrentVariant();

			console.log('Variant', this.currentVariant);

		},

		determineCurrentVariant() {

			const data = [];
			for (const optionName in this.active) {

				data.push(this.options[optionName][this.active[optionName]].ids);

			}

			return this.getVariantsByIds(this.allIntersectingIds(data))[0];

		},

		determineUnavailable() {

			for (const optionName in this.options) {

				const option = this.options[optionName];

				const ids = this.getComparableIds(optionName);

				for (const optionValue in option) {

					Object.assign(
						this.options[optionName][optionValue], {
							'isIncompatible': false,
							'isUnavailable': false
						}
					);

					let data = this.options[optionName][optionValue];

					const intersecting = this.intersectingIds(ids, data['ids']);
					let hasStock = false;

					if (!intersecting.length) {

						this.options[optionName][optionValue]['isIncompatible'] = true;

					}

					for (const variant of this.getVariantsByIds(intersecting)) {

						console.log(optionName, optionValue, variant.stock);

						if (variant.stock === '' || parseInt(variant.stock) > 0) {
							
							hasStock = true;

							break;

						}

					}

					if (!hasStock) this.options[optionName][optionValue]['isUnavailable'] = true;

				}

			}

		},

		async fetchVariants() {

			const variants = await api('get', 'api/product-variants/export/{{ productId }}');

			this.variants = variants;

			this.createOptions();

		}

	}

}

createApp({
	
	Product,

	$delimiters: ['${', '}'],

}).mount()

</script>

<template id="product">

	<div class="product">

		<h3>Your Product</h3>

		<ul v-if="currentVariant" class="current-variant">
			<li><span>Price:</span> <span>${currentVariant.price}</span></li>
			<li><span>Stock:</span> <span>${currentVariant.stock}</span></li>
		</ul>

		<div v-for="(option, optionName, optionIndex) in options" class="options option">

			<h4>${optionName}</h4>

			<ul>
				<li 
					v-for="(optionSettings, optionValue) in option" 
					:data-value="optionValue" 
					:data-name="optionName"
					@click="chooseOption"
					class="options option-value"
					:class="{
						'active': optionSettings.isActive,
						'incompatible': optionSettings.isIncompatible,
						'unavailable': optionSettings.isUnavailable
					}"
				>
					<div>${optionValue}</div>
				</li>
			</ul>

		</div>

	</div>

</template>

<div v-scope="Product({})" @vue:mounted="mounted">
</div>

{% endblock %}

