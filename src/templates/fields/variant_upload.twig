{% set canImport = currentUser.can("variant-manager:import") %}
<input type="hidden" name="action" value="variant-manager/product-variants/upload">
<input type="file" id="{{ id }}-file" name="{{ name }}" style="display: none;">
<input type="hidden" id="{{ id }}-productType" name="productTypeHandle">
<input type="hidden" id="{{ id }}-refreshVariants" name="refreshVariants">
<button
	type="button"
	{% if not canImport %}disabled{% endif %}
	class="btn submit {% if not canImport %}disabled{% endif %}"
	data-icon="upload"
	style="position: relative; overflow: hidden;"
	id="{{ id }}-btn"
>{{ 'Upload Product'|t }}
</button>

<div id="upload-modal" class="modal-shade" style="">
	<div class="modal-wrapper">
		<div id="modal" class="modal fitted" style="">
			<div class="body">
				<div class="message" id="{{ id }}-message">ffooba</div>
				<div class="actions {{ id }}-primary-actions" style="display: flex; flex-direction: column; align-items: flex-end; grid-gap: 1rem;">
						<div id="{{ id }}-productTypeContainer" class="hidden"
								style="display: flex; flex: 1; justify-content: flex-start; grid-gap: 1rem;">
							<div style="display: flex; flex-direction: column; place-content: center;">
								Product Type
							</div>
							<div class="select">
								<select name="productTypeHandle" id="{{ id }}-productType-selection">
								</select>
							</div>
						</div>
						<div style="display: flex; flex-direction: column; align-items: flex-end" id="{{ id }}-refreshVariantsContainer" class="hidden">
							<div style="display: flex; flex-direction: row; grid-gap: 0.5rem;">
								<label for="{{ id }}-refreshVariants-update">
									Update &amp; remove extra variants <div class="info">Updates existing variants and deletes any that are not listed in the CSV.</div>
								</label>
								<input type="radio" name="refreshVariants" id="{{ id }}-refreshVariants-update" value="0" checked>
							</div>
							<div style="display: flex; flex-direction: row; grid-gap: 0.5rem;">
								<label for="{{ id }}-refreshVariants-refresh">
									Replace all variants <div class="info">Deletes all existing variants before importing only the ones in the CSV.</div>
								</label>
								<input type="radio" name="refreshVariants" id="{{ id }}-refreshVariants-refresh" value="1">
							</div>
						</div>
						<div>
							<button type="button" class="btn icon hidden" style="position: relative; overflow: hidden;"
											id="{{ id }}-confirm-btn"></button>
							<button class="btn text {{ id }}-close-btn" style="position: relative; overflow: hidden;">Cancel</button>
						</div>
				</div>
				<div class="actions {{ id }}-complete-actions hidden" style="grid-gap: 1rem;">
					<button class="btn {{ id }}-close-btn" style="position: relative; overflow: hidden;">Close</button>
				</div>
			</div>
		</div>
	</div>
	<button type="button" class="btn icon remove {{ id }}-close-btn" data-icon="remove" style="position: absolute; top: 1rem; right: 1rem; background-color: #FFFFFF;"></button>
</div>

{% if canImport %}
	<script type="text/javascript">
		document.addEventListener('DOMContentLoaded', () => {
			let field = document.getElementById('{{ namespacedId }}-file');
			let btn = document.getElementById('{{ namespacedId }}-btn');

			let primaryActions = document.getElementsByClassName('{{ namespacedId }}-primary-actions')[0];
			let completeActions = document.getElementsByClassName('{{ namespacedId }}-complete-actions')[0];

			let message = document.getElementById('{{ namespacedId }}-message');
			let productType = document.getElementById('{{ namespacedId }}-productType');
			let refreshVariants = document.getElementById('{{ namespacedId }}-refreshVariants');
			let productTypeSelection = document.getElementById('{{ namespacedId }}-productType-selection');
			let refreshVariantsContainer = document.getElementById('{{ namespacedId }}-refreshVariantsContainer');
			let productTypeContainer = document.getElementById('{{ namespacedId }}-productTypeContainer');
			let confirmBtn = document.getElementById('{{ namespacedId }}-confirm-btn');
			let closeBtn = document.getElementById('{{ namespacedId }}-close-btn');

			let uploadSpinner = document.getElementById('upload-spinner');

			let productName = null;

			for (const el of document.getElementsByClassName('{{ namespacedId }}-close-btn')) {
				el.addEventListener('click', closeModal);
			}

			let form = field.closest('form');
			btn.addEventListener('click', openFileDialog);
			field.addEventListener('change', showConfirmation);
			confirmBtn.addEventListener('click', confirmChanges);

			function showConfirmation(e) {
				let file = e.target.files[0] ?? null;

				if (!file) {
					return;
				}

				btn.disabled = true;
				btn.classList.add('disabled');

				productName = file.name.split('.').slice(0, -1).join('.');
				const fileType = file.name.split('.').slice(1, 2)[0];

				async function checkExists() {
					return fetch(`/admin/variant-manager/product-exists?name=${productName}`, {
						method: 'POST',
						headers: {
							'Accept': 'application/json',
							'X-CSRF-Token': '{{ craft.app.request.csrfToken }}',
							'X-Requested-With': 'XMLHttpRequest',
						},
					}).then(async (response) => {
						if (response.status > 299) {
							let error = await response.json();
							throw new Error(error.message);
						}
						const res = await response.json();
						if (fileType === 'zip') {
							return {zip: true, ...res};
						}

						return res
					})
				}

				uploadSpinner.classList.remove('hidden');
				checkExists().then((result) => {
					uploadSpinner.classList.add('hidden');
					if (result.zip) {
						// Zip file
						productTypeContainer.classList.remove("hidden");

						productTypeSelection.innerHTML = result.productTypes.map((productType) => {
							return `<option value="${productType[0]}">${productType[1]}</option>`;
						}).join("");

						confirmBtn.innerHTML = "Process Zip";
						primaryActions.classList.remove('hidden');
						completeActions.classList.add('hidden');
						confirmBtn.classList.remove("edit", "hidden");
						confirmBtn.classList.add("add");
						refreshVariantsContainer.classList.remove("hidden");

						message.innerHTML = "Are you sure you want to process this zip file?";
					} else if (!result.exists) {
						// New product
						productTypeContainer.classList.remove("hidden");

						productTypeSelection.innerHTML = result.productTypes.map((productType) => {
							return `<option value="${productType[0]}">${productType[1]}</option>`;
						}).join("");

						confirmBtn.innerHTML = "Create Product";
						primaryActions.classList.remove('hidden');
						completeActions.classList.add('hidden');
						confirmBtn.classList.remove("edit", "hidden");
						confirmBtn.classList.add("add");
						refreshVariantsContainer.classList.add("hidden");

						message.innerHTML = "Are you sure you want to create a new product?";
					} else {
						// Existing product
						productTypeContainer.classList.add("hidden");

						confirmBtn.innerHTML = "Edit Product";
						primaryActions.classList.remove('hidden');
						completeActions.classList.add('hidden');
						confirmBtn.classList.remove("add", "hidden");
						confirmBtn.classList.add("edit");
						refreshVariantsContainer.classList.remove("hidden");
						message.innerHTML =
							`Are you sure you want to edit an existing product named <strong>"${result.name}"</strong>?`;
					}

					modal.show();
				}).catch((error) => {
					modal.hide();
					uploadSpinner.classList.add('hidden');
					btn.disabled = false;
					btn.classList.remove('disabled');

					confirmBtn.classList.add("hidden");

					if (error.statusText) {
						Craft.cp.displayError(`An error occurred: ${error.statusText}`);
					} else if (error.message) {
						Craft.cp.displayError(error.message);
					}
				});

				return true;
			};

			function closeModal(event) {
				primaryActions.classList.remove('hidden');
				completeActions.classList.add('hidden');
				btn.disabled = false;
				btn.classList.remove('disabled');

				modal.hide();
				window.location.reload();
			}

			function openFileDialog(event) {
				field.click();
			}

			function confirmChanges(event) {
				productType.value = productTypeSelection.value;
				let refreshVariantsSelection = document.querySelector('input[name="refreshVariants"]:checked');
				refreshVariants.value = refreshVariantsSelection.value;
				modal.hide();
				form.submit();
			}
		});
	</script>
{% endif %}

{% js %}
confirmationToken = null;
let modal = new Garnish.Modal($('#upload-modal'));
modal.quickHide();
{% endjs %}
