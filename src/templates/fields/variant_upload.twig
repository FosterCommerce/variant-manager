{% set canImport = currentUser.can("variant-manager:import") %}
<input type="file" id="{{ id }}" name="{{ name }}" style="display: none;">
<button
	type="button"
	{% if not canImport %}disabled{% endif %}
	class="btn {% if not canImport %}disabled{% endif %}"
	data-icon="upload"
	style="position: relative; overflow: hidden;"
	id="{{ id }}-btn"
>{{ 'Upload Product'|t }}
</button>

<div id="upload-modal" class="modal-shade" style="">
	<div class="modal-wrapper">
		<div id="modal" class="modal fitted" style="">
			<div class="body">
				<div class="message" id="{{ id }}-message"></div>
				<div class="actions {{ id }}-primary-actions" style="grid-gap: 1rem;">
					<div id="{{ id }}-productTypeContainer" class="hidden" style="display: flex; flex: 1; justify-content: flex-start; grid-gap: 1rem;">
						<div style="display: flex; flex-direction: column; place-content: center;">
							Product Type
						</div>
						<div class="select">
							<select id="{{ id }}-productType">
							</select>
						</div>
					</div>
					<button type="button" class="btn icon hidden" style="position: relative; overflow: hidden;"
									id="{{ id }}-confirm-btn"></button>
					<button class="btn text {{ id }}-close-btn" style="position: relative; overflow: hidden;">Cancel</button>
				</div>
				<div class="actions {{ id }}-complete-actions hidden" style="grid-gap: 1rem;">
					<button class="btn {{ id }}-close-btn" style="position: relative; overflow: hidden;">Close</button>
				</div>
			</div>
		</div>
	</div>
	<button type="button" class="btn icon remove {{ id }}-close-btn" data-icon="remove"
					style="position: absolute; top: 1rem; right: 1rem; background-color: #FFFFFF;"></button>
</div>

{% if canImport %}
	<script type="text/javascript">
		let field = document.getElementById('{{ namespacedId }}');
		let btn = document.getElementById('{{ namespacedId }}-btn');

		let primaryActions = document.getElementsByClassName('{{ namespacedId }}-primary-actions')[0];
		let completeActions = document.getElementsByClassName('{{ namespacedId }}-complete-actions')[0];

		let message = document.getElementById('{{ namespacedId }}-message');
		let productType = document.getElementById('{{ namespacedId }}-productType');
		let productTypeContainer = document.getElementById('{{ namespacedId }}-productTypeContainer');
		let confirmBtn = document.getElementById('{{ namespacedId }}-confirm-btn');
		let closeBtn = document.getElementById('{{ namespacedId }}-close-btn');

		let productName = null;

		for (const el of document.getElementsByClassName('{{ namespacedId }}-close-btn')) {
			el.addEventListener('click', closeModal);
		}

		let form = field.closest('form');

		btn.addEventListener('click', openFileDialog);
		confirmBtn.addEventListener('click', confirmChanges);
		field.addEventListener('change', onSelectedFile);

		form.addEventListener('submit', (e) => {
			e.preventDefault();

			btn.disabled = true;
			btn.classList.add('disabled');

			const file = new FormData(form).get('variant-uploads');
			productName = file.name.split('.').slice(0, -1).join('.');
			const fileType = file.name.split('.').slice(1, 2)[0];

			async function checkExists() {
				return fetch(`/admin/variant-manager/product-exists?name=${productName}`, {
					method: 'POST',
					headers: {
						'Accept': 'application/json',
						'X-CSRF-Token': '{{ craft.app.request.csrfToken }}',
						'X-Requested-With': 'XMLHttpRequest',
					},
				}).then(async (response) => {
					if (response.status > 299) {
						let error = await response.json();
						throw new Error(error.message);
					}
					const res = await response.json();
					if (fileType === 'zip') {
						return {zip: true, ...res};
					}

					return res
				})
			}

			checkExists().then((result) => {
				if (result.zip) {
					productTypeContainer.classList.remove("hidden");

					productType.innerHTML = result.productTypes.map((productType) => {
						return `<option value="${productType[0]}">${productType[1]}</option>`;
					}).join("");

					confirmBtn.innerHTML = "Process Zip";
					confirmBtn.classList.remove("edit", "hidden");
					confirmBtn.classList.add("add");

					message.innerHTML = "Are you sure you want to process this zip file?";
				} else if (!result.exists) {
					productTypeContainer.classList.remove("hidden");

					productType.innerHTML = result.productTypes.map((productType) => {
						return `<option value="${productType[0]}">${productType[1]}</option>`;
					}).join("");

					confirmBtn.innerHTML = "Create Product";
					confirmBtn.classList.remove("edit", "hidden");
					confirmBtn.classList.add("add");

					message.innerHTML = "Are you sure you want to create a new product?";
				} else {
					productTypeContainer.classList.add("hidden");

					confirmBtn.innerHTML = "Edit Product";
					confirmBtn.classList.remove("add", "hidden");
					confirmBtn.classList.add("edit");

					message.innerHTML =
						`Are you sure you want to edit an existing product named <strong>"${result.name}"</strong>?`;
				}

				modal.show();
			}).catch((error) => {
				btn.disabled = false;
				btn.classList.remove('disabled');

				try {
					error = JSON.parse(error.message);
				} catch (E) {
					error = error;
				}

				confirmBtn.classList.add("hidden");

				if (error.statusText) {
					message.innerHTML = `<strong class="error">An error occurred:</strong> ${error.statusText}`;
				} else if (error.message) {
					message.innerHTML = `<strong class="error">An error occurred:</strong> ${error.message}`;
				}

				modal.show();
			});

			return true;
		});

		function closeModal(event) {
			primaryActions.classList.remove('hidden');
			completeActions.classList.add('hidden');
			btn.disabled = false;
			btn.classList.remove('disabled');

			modal.hide();
			form.reset();
		}

		function openFileDialog(event) {
			field.click();
		}

		function onSelectedFile(event) {
			const files = event.target.files;
			parseFile(files[0]);
		}

		function confirmChanges(event) {
			try {
				primaryActions.classList.add('hidden');
				message.innerHTML = `Uploading <strong>${productName}</strong>`;

				const payload = new FormData(form);
				const file = payload.get("variant-uploads");

				payload.set(
					"variant-uploads",
					new File([file], file.name, {type: "text/csv"})
				);

				payload.set(
					"productTypeHandle", productType.value
				);

				fetch('/admin/variant-manager/upload', {
					method: "POST",
					headers: {
						'Accept': 'application/json',
						'X-CSRF-Token': '{{ craft.app.request.csrfToken }}',
						'X-Requested-With': 'XMLHttpRequest',
					},
					body: payload,
				}).then(async (response) => {
					if (!response.ok) {
						if (response.statusText) {
							throw Error(response.statusText);
						} else {
							throw Error(JSON.stringify(await response.json()));
						}
					} else {
						return {};
					}
				}).then((result) => {
					completeActions.classList.remove('hidden');
					message.innerHTML = `File <strong>${file.name}</strong> has been queued for processing`;
				}).catch((error) => {
					primaryActions.classList.remove('hidden');
					completeActions.classList.add('hidden');
					try {
						error = JSON.parse(error.message);
					} catch (E) {
						error = error;
					}

					confirmBtn.classList.add("hidden");
					productTypeContainer.classList.add("hidden");

					if (error.statusText) {
						message.innerHTML = `<strong class="error">An error occurred:</strong> ${error.statusText}`;
					} else if (error.message) {
						message.innerHTML = `<strong class="error">An error occurred:</strong> ${error.message}`;
					}
				}).finally(() => {
					btn.disabled = false;
					btn.classList.remove('disabled');
				})
			} catch (E) {
				console.log(E);
			}
		}

		function parseFile(file) {
			// Using "form.submit() isn't consistent so we have to rely on dispatching the submit event manually."
			form.dispatchEvent(new Event('submit', {'cancelable': true}));
		}

	</script>
{% endif %}

{% js %}
	confirmationToken = null;
	let modal = new Garnish.Modal($('#upload-modal'));
	modal.quickHide();
{% endjs %}
